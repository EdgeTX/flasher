# This is a basic workflow to help you get started with Actions

name: Deploy-Release

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run electron:build
    - name: List Debug Dist Files
      run: ls dist_electron/
    - name: Update Release
      # You may pin to the exact commit or the version.
      # uses: johnwbyrd/update-release@1d5ec4791e40507e5eca3b4dbf90f0b27e7e4979
      uses: johnwbyrd/update-release@v1.0.0
      with:
        # Your Github token; try \$\{\{ secrets.GITHUB_TOKEN \}\} if your build lasts less than an hour, or create your own secret token with repository access if your build requires longer than an hour.
        token: ${{ secrets.GITHUB_TOKEN }}
        # Paths to built files to be released. May be absolute or relative to \$\{\{ github.workspace \}\}.
        files: ${{ github.workspace }}/dist_electron/*.AppImage
        # The name of the release to be created. A reasonable looking release name will be created from the current \$\{\{ github.ref \}\} if this input is not supplied.
        release: Latest
        # The name of the tag to be used. If not provided, the name of the release will be used.
        tag: latest
    
  build-macos:
    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run electron:build
    - name: List Debug Dist Files
      run: ls dist_electron/
    - name: Update Release
      # You may pin to the exact commit or the version.
      # uses: johnwbyrd/update-release@1d5ec4791e40507e5eca3b4dbf90f0b27e7e4979
      uses: johnwbyrd/update-release@v1.0.0
      with:
        # Your Github token; try \$\{\{ secrets.GITHUB_TOKEN \}\} if your build lasts less than an hour, or create your own secret token with repository access if your build requires longer than an hour.
        token: ${{ secrets.GITHUB_TOKEN }}
        # Paths to built files to be released. May be absolute or relative to \$\{\{ github.workspace \}\}.
        files: ${{ github.workspace }}/dist_electron/*.dmg
        # The name of the release to be created. A reasonable looking release name will be created from the current \$\{\{ github.ref \}\} if this input is not supplied.
        release: Latest
        # The name of the tag to be used. If not provided, the name of the release will be used.
        tag: latest
    
  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run electron:build
    - name: List Debug Dist Files
      run: ls dist_electron/
    - name: Update Release
      # You may pin to the exact commit or the version.
      # uses: johnwbyrd/update-release@1d5ec4791e40507e5eca3b4dbf90f0b27e7e4979
      uses: johnwbyrd/update-release@v1.0.0
      with:
        # Your Github token; try \$\{\{ secrets.GITHUB_TOKEN \}\} if your build lasts less than an hour, or create your own secret token with repository access if your build requires longer than an hour.
        token: ${{ secrets.GITHUB_TOKEN }}
        # Paths to built files to be released. May be absolute or relative to \$\{\{ github.workspace \}\}.
        files: ${{ github.workspace }}/dist_electron/*.exe
        # The name of the release to be created. A reasonable looking release name will be created from the current \$\{\{ github.ref \}\} if this input is not supplied.
        release: Latest
        # The name of the tag to be used. If not provided, the name of the release will be used.
        tag: latest

